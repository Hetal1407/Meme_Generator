import { ColorWrap } from 'ngx-color';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './chrome-fields.component';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-color';
export declare class ChromeComponent extends ColorWrap {
    /** Remove alpha slider and options from picker */
    disableAlpha: boolean;
    circle: Record<string, string>;
    pointer: Record<string, string>;
    activeBackground: string;
    constructor();
    afterValidChange(): void;
    handleValueChange({ data, $event }: {
        data: any;
        $event: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChromeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChromeComponent, "color-chrome", never, { "disableAlpha": "disableAlpha"; }, {}, never, never>;
}
export declare class ColorChromeModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorChromeModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ColorChromeModule, [typeof ChromeComponent, typeof ɵngcc1.ChromeFieldsComponent], [typeof ɵngcc2.CommonModule, typeof ɵngcc3.AlphaModule, typeof ɵngcc3.CheckboardModule, typeof ɵngcc3.EditableInputModule, typeof ɵngcc3.HueModule, typeof ɵngcc3.SaturationModule], [typeof ChromeComponent, typeof ɵngcc1.ChromeFieldsComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ColorChromeModule>;
}

//# sourceMappingURL=chrome.component.d.ts.map